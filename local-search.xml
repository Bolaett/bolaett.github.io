<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/23/Eileen/"/>
    <url>/2023/03/23/Eileen/</url>
    
    <content type="html"><![CDATA[<h1 id="Eileen-你happy-我不happy"><a href="#Eileen-你happy-我不happy" class="headerlink" title="Eileen 你happy 我不happy"></a>Eileen 你happy 我不happy</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/22/hello-world/"/>
    <url>/2023/03/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/01/01/Python%E6%A0%B8%E5%BF%83%E8%AF%AD%E6%B3%95%20/"/>
    <url>/2023/01/01/Python%E6%A0%B8%E5%BF%83%E8%AF%AD%E6%B3%95%20/</url>
    
    <content type="html"><![CDATA[<p>&#x3D;&#x3D;另见[[Python应用指南]]&#x3D;&#x3D;</p><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">Pypi: pypi.org<br>官网： python.org<br>pypi.tuna.tsinghua.edu.cn<br>弱类型语言（动态类型）<br>解释型语言<br></code></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 井号后面跟着注释内容</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">多行注释</span><br><span class="hljs-string">以及文件帮助文档</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h1><p>代码缩进（tab）以及冒号( : )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>s+=i<br></code></pre></td></tr></table></figure><h1 id="文件编码声明"><a href="#文件编码声明" class="headerlink" title="文件编码声明"></a>文件编码声明</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br></code></pre></td></tr></table></figure><h1 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> keyword<br><span class="hljs-built_in">print</span>(keyword.kwlist)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">and as assert break class continue def del elif else except finally for from False global if import in is lambda nonlocal not None or pass raise return try True while with yield</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="标识符（变量名）"><a href="#标识符（变量名）" class="headerlink" title="标识符（变量名）"></a>标识符（变量名）</h1><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">1.</span> 字母、数字、下划线<br><span class="hljs-bullet">2.</span> 数字不能开头<br><span class="hljs-bullet">3.</span> 区分大小写<br><span class="hljs-bullet">4.</span> \<span class="hljs-emphasis">_xxx -&gt; 不能直接访问的类属性，不可以用from xxx import*导入</span><br><span class="hljs-emphasis">5. \_</span>\<span class="hljs-emphasis">_xxx -&gt; 类私有成员</span><br><span class="hljs-emphasis">6. \_</span>\<span class="hljs-emphasis">_xxx\_</span>\_ -&gt; 构造函数<br><span class="hljs-bullet">7.</span> 同一个值只占用一段内存空间，可以有不同的标识符<br><span class="hljs-bullet">8.</span> 赋值的时候变量名只能在左边<br><span class="hljs-bullet">9.</span> id( )返回内存地址   type( )返回数据类型<br></code></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h5 id="整形int"><a href="#整形int" class="headerlink" title="整形int"></a>整形int</h5><ul><li>十六进制 0x</li><li>八进制 0o</li><li>二进制 0b</li><li>相互之间可以直接互相运算，不用转换，但是结果用十进制返回</li></ul><h5 id="浮点float"><a href="#浮点float" class="headerlink" title="浮点float"></a>浮点float</h5><ul><li>所有的小数</li></ul><h5 id="复数complecated"><a href="#复数complecated" class="headerlink" title="复数complecated"></a>复数complecated</h5><ul><li>a+bj的形式</li></ul><h5 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h5><ul><li>‘abcdefg’ 单引号</li><li>“abcdefg” 双引号</li><li>‘’’abcdefg’’’ 三引号</li></ul><h5 id="布尔Boole"><a href="#布尔Boole" class="headerlink" title="布尔Boole"></a>布尔Boole</h5><ul><li>True==1</li><li>False==0</li><li>只有四种情况为假  ：1.  False None； 2. 数值零；3. 空序列 ；4. 自定义对象实例</li></ul><h1 id="输入输出函数"><a href="#输入输出函数" class="headerlink" title="输入输出函数"></a>输入输出函数</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p><code>a=int(input(&quot;提示字符&quot;))</code><br>input( )函数只接受字符串类型  </p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li>print用一次就自动换行一次</li><li><code>print(a,b,c)</code>  中间空一格依次输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;第一行</span><br><span class="hljs-string">         第二行</span><br><span class="hljs-string">         第三行&#x27;&#x27;&#x27;</span>) <span class="hljs-comment"># 利用三引号多行输出</span><br></code></pre></td></tr></table></figure><ul><li><code>print(xxx,end=&#39;&#39;)</code>  不换行，如果字符串是空的就紧密拼接</li><li><code>print(r&#39;xxxxxx&#39;)</code>   取消转义，原样输出</li></ul><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><ul><li>int( ) 只有十进制的字符串才能用</li><li>float( )</li><li>str( ) </li><li>repr( ) </li><li>eval( ) 计算字符串中的有效表达式</li><li>chr( ) 返回字符</li><li>ord( ) 返回ASCII码</li><li>hex( ) 转16进制</li><li>oct( ) 转8进制</li><li>bin( ) 转2进制</li><li>list( ) 转换成列表</li><li>tuple( ) 转换成元组</li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h5 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h5><p><code>+ - * / % // **</code></p><ul><li>% 不一定是正数，甚至不一定是整数，符号与第二个操作数相同</li><li>// 向下取整</li><li>int( ) 取整数部分</li><li>math.floor( ) 向下取整</li><li>math.ceil( ) 向上取整</li></ul><h5 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符 ="></a>赋值运算符 <code>=</code></h5><p>右边赋给左边</p><h5 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h5><p><code>&gt; &lt; != ==</code></p><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p><code>and or not</code></p><h5 id="位运算符（二进制数不能用逻辑运算符）"><a href="#位运算符（二进制数不能用逻辑运算符）" class="headerlink" title="位运算符（二进制数不能用逻辑运算符）"></a>位运算符（二进制数不能用逻辑运算符）</h5><ul><li><code>&lt;&lt;</code>  左移</li><li><code>&gt;&gt;</code>  右移</li><li><code>&amp;</code>   与</li><li><code>|</code>  或</li><li><code>~</code>  非</li><li><code>^</code>  异或（异1同0）</li></ul><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><p> 幂 &gt; 取反 正负 &gt; 乘除 &gt; 加减 &gt; 移位 &gt; 与 &gt; 异或 &gt; 或 &gt; 比较</p><h1 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h1><p> <code>K= A if condition else B</code>(真A假B)<br> C++中为 <code>K= condition ? A : B</code>(三目运算符)</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p> 解释型语言，必须从上到下顺序执行<br> 顺序、选择（分支）、循环</p><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5><ul><li><code>if...</code>  并列使用可以用作满足多个条件的判断</li><li><code>if...else...</code>  补集</li><li><code>if...elif...elif...else...</code>  当遇到第一个真的时候就跳出了，条件间无交集</li></ul> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> A:<br>M<br><span class="hljs-keyword">if</span> B:<br>N<br><span class="hljs-keyword">else</span>: P<br><span class="hljs-keyword">else</span>: Q<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">M:A</span><br><span class="hljs-string">N:A and B</span><br><span class="hljs-string">P:not(A and B)</span><br><span class="hljs-string">Q:not A</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>C++中的switch：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">switch</span> (flag)<br>&#123;<br><span class="hljs-keyword">case</span> value1 : xxx;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> value2 : xxx;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> valuen : xxx;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>: xxx;<span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><ul><li>计次循环（for） 条件循环（while）</li><li>range( )左闭右开，生成一系列整数，range对象</li><li>可以用list( )把range对象变成列表</li><li>遍历字符串<code>for ch in string</code></li><li>break 与if 联用，跳出本层循环</li><li>continue 与if 联用，跳出本次循环</li><li>pass 占位</li></ul><h1 id="序列（数据结构）"><a href="#序列（数据结构）" class="headerlink" title="序列（数据结构）"></a>序列（数据结构）</h1><ul><li><p>列表 元组 集合 字典 字符串  —&gt;存储多个值的连续内存空间</p></li><li><p>索引 0，1，2，3，4，…，n</p></li><li><p>索引 -n , -(n-1) , … , -1</p></li><li><p>切片<code>sname[start:end:step]</code>  左闭右开，冒号</p></li><li><p>序列相加用加号，同类型才可以相加</p></li><li><p>序列数乘 直接用*</p></li><li><p>初始化指定长度列表 <code>[None]*n</code></p></li><li><p>检查是否是序列成员 in</p></li><li><p>长度 len 最大值 max 最小值 min 求和 sum</p></li><li><p>enumerate( )组成索引序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index,item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">list</span>):<br><span class="hljs-built_in">print</span>(index,item)<br></code></pre></td></tr></table></figure></li><li><p>listname.append( )末尾追加</p></li><li><p>删除序列 del</p></li><li><p>通过索引或键访问元素或值 </p></li><li><p>仅能通过索引修改值</p></li><li><p>删除单个元素仅能通过索引删除 del</p></li><li><p>seq.remove( ) 根据值删除，只删第一个，不存在则抛出异常</p></li><li><p>seq.pop( ) 根据索引删除</p></li><li><p>seq.count( ) 出现次数</p></li><li><p>seq.index( ) 首次出现的下标</p></li><li><p><code>seq.sort(key=None,reverse=False)</code> 可以作为单独语句使用，改变原数组，key=str.lower不区分大小写</p></li><li><p><code>newseq=sorted(seq)</code> 生成新列表，参数同前</p></li></ul><h1 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span>=[Expression <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>]<br><span class="hljs-built_in">list</span>=[Expression <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>]<br><span class="hljs-built_in">list</span>=[Expression <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">if</span> condition]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/01/01/Markdown/"/>
    <url>/2023/01/01/Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="markdown简介"><a href="#markdown简介" class="headerlink" title="markdown简介"></a>markdown简介</h1><ul><li>[[格式化你的笔记]]是官方文档中的md教程</li><li>一个轻量化标记语言，诞生于2004年。  </li><li>可以和HTML PDF epub互相转换，用来简化文章的排版，知乎、csdn、GitHub、微信以及印象笔记都可以使用markdown。  </li><li>可以写书、幻灯片、电子邮件、日记、便签、记笔记、写技术博客。移植性很强，纯文本的格式安全性更高。  </li><li>主要分为三个部分学习：1.markdown语法本身；2.编辑器的使用；3.应用场景。  </li><li>markdown主要分为基础语法和最流行的扩展语法GFM（GitHub flavored markdown）。编写可读性强、可移植性强、更易于维护的markdown源代码。  </li><li>设计灵感主要源于纯文本电子邮件格式，相当于简化版HTML，其实是相互兼容的（可以在.md文件中使用HTML语法和latex语法</li><li>2014年时，<a href="http://commonmark.org/">commonmark规范</a> 发布，标准化工作开始于2012年</li><li>当你对文章排版没有特殊需求，且不想花太多时间在排版上时，可以使用markdown，编辑器会对源代码进行渲染，最终排版效果会很简洁</li><li>编辑器：typora VSCode Obsidian</li><li>如果对字号、段落、图片、表格排版要求较高，还是用word比较好（markdown可以很轻松地转换成word）</li><li>word的兼容性不强，并且打开速度慢</li><li>注意建立自己的写作规范</li><li>用全英文书写会方便很多</li><li>总的来说，我们在努力让 Obsidian 的语法不偏离正统的 Markdown 语法太多。总的来看，Obsidian 的语法大多还是基于 CommonMark，包括了一些 GitHub Flavored Markdown（GFM）和 LaTeX，以及我们特有的嵌入文件语法。</li></ul><h1 id="严格换行模式"><a href="#严格换行模式" class="headerlink" title="严格换行模式"></a>严格换行模式</h1><ol><li>末尾加两个空格才能换行</li><li>不加空格换行的话两行会在同一行连在一起（中间有一个空格）</li><li>严格换行方便移植</li><li>严格换行对于引用内容也有效果</li><li>每行限制字符80个左右</li><li>行中空格在渲染的时候会变成一个空格！！！！！！（怎么加空格呢？）</li></ol><h1 id="标题方法"><a href="#标题方法" class="headerlink" title="标题方法"></a>标题方法</h1><p><code># 一级标题</code></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p><code>---或***或___</code><br>上面是分割线（三个减号或者三个下划线或三个星号）<br>分割线前要空一行 否则会变成标题标识符，除非用星号</p><h1 id="obsidian对于latex语法也支持"><a href="#obsidian对于latex语法也支持" class="headerlink" title="obsidian对于latex语法也支持"></a>obsidian对于latex语法也支持</h1><p>语法完全一样，分为行内公式和行外公式<br><code>$$p^3_&#123;ij&#125;\qquad\sum_&#123;K=1&#125;^3ka^x+y\qquad\neq a^&#123;x+y&#125;$$</code><br>$$p^3_{ij}\qquad\sum_{K&#x3D;1}^3ka^x+y\qquad\neq a^{x+y}$$</p><h1 id="引用块（加-gt-且不用空格）"><a href="#引用块（加-gt-且不用空格）" class="headerlink" title="引用块（加&gt;且不用空格）"></a>引用块（加&gt;且不用空格）</h1><p><code>&gt;引用内容</code></p><blockquote><p>引用第一行<br>引用第二行<br>引用第三行<br>引用第四行  （末尾要加两个空格来换行）  </p></blockquote><ul><li>多行引用也可以手动加入&gt;</li><li>结束引用块的时候要空一行 否则会一起加入引用块  </li><li>在引用中也可以使用其他的Markdown语法</li><li>段落与换行的格式在引用中同样适用</li></ul><h5 id="引用嵌套"><a href="#引用嵌套" class="headerlink" title="引用嵌套"></a>引用嵌套</h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&gt;first line<br>&gt;&gt;second line<br>&gt;&gt;&gt;third line<br></code></pre></td></tr></table></figure><blockquote><p>first line</p><blockquote><p>second line<br>如果回车的话，自动续行的等级与上一行相同</p><blockquote><p><strong>第三层嵌套（加粗也是支持的）</strong></p></blockquote></blockquote></blockquote><h1 id="粗体-斜体-划线-高亮"><a href="#粗体-斜体-划线-高亮" class="headerlink" title="粗体  斜体 划线 高亮"></a>粗体  斜体 划线 高亮</h1><p><code>**这是粗体**</code><br><strong>这是粗体（俩星号且不用加空格）</strong><br><code>*这是斜体*</code><br><em>这是斜体（一个星号，也不用加空格）</em><br><code>~~这是划线~~</code><br><del>这是划线</del>（波浪线在左上角）<br><code>==这是高亮==</code><br>&#x3D;&#x3D;这是高亮&#x3D;&#x3D;（两个等号</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">-</span> 第一行（减号加空格）<br><span class="hljs-bullet">-</span> 第二行（回车自动添加）<br></code></pre></td></tr></table></figure><ul><li>第一行（减号加空格）</li><li>第二行（回车自动添加）<br>按两下回车回归正常</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">1.</span> 第一行<br><span class="hljs-bullet">2.</span> 第二行<br></code></pre></td></tr></table></figure><ol><li>第一行</li><li>第二行（记得加空格）</li></ol><h5 id="列表嵌套（子列表）列表嵌套使用tab"><a href="#列表嵌套（子列表）列表嵌套使用tab" class="headerlink" title="列表嵌套（子列表）列表嵌套使用tab"></a>列表嵌套（子列表）列表嵌套使用tab</h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs md"><span class="hljs-bullet">-</span> 第一行<br><span class="hljs-bullet">-</span> 第二行<br><span class="hljs-bullet">-</span> 2.1<br><span class="hljs-bullet">-</span> 2.2<br><span class="hljs-bullet">-</span> 第三行<br><span class="hljs-bullet"> 1.</span> 3.1<br><span class="hljs-bullet"> 2.</span> 3.2<br><span class="hljs-bullet"> 3.</span> 3.3<br></code></pre></td></tr></table></figure><ul><li>第一行</li><li>第二行<ul><li>2.1</li><li>2.2</li></ul></li><li>第三行<ol><li>3.1</li><li>3.2</li><li>3.3</li></ol></li></ul><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><p><img src="http://图片地址/" alt="图片名称">  </p><ul><li>感叹号加中括号加小括号（中间都没有空格）</li><li>！！！如果是网络链接一定要加http:&#x2F;&#x2F;或https:&#x2F;&#x2F;</li><li>图片名称可以是空的，地址可以是本地路径也可以是网络图片地址</li><li>一定要加感叹号</li></ul><h1 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h1><p>用方括号包裹链接文字，后面紧跟小括号包裹链接地址<br>！！！也可以把链接在某个地方定义好，然后在正文中通过变量的方式来引用，这种方法叫引用链接。<br>引用链接方法：[变量名]紧跟冒号再紧跟链接</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h5><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs md">在日常工作中，我们经常使用的网址有[Google] 、[Github] 和[StackOverFlow]   <br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://www.google.com</span><br>[<span class="hljs-symbol">GitHub</span>]: <span class="hljs-link">http://github.com</span><br>[<span class="hljs-symbol">StackOverFlow</span>]: <span class="hljs-link">http://stackoverflow.com</span><br></code></pre></td></tr></table></figure><p>在日常工作中，我们经常使用的网址有<a href="http://www.google.com/">Google</a> 、<a href="http://github.com/">Github</a> 和<a href="http://stackoverflow.com/">StackOverFlow</a>   </p><p>新的一行（上面的注释内容会被隐藏）  </p><h5 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h5><p>网络地址和邮箱地址用尖括号括起来会自动转换成超链接<br><code>&lt;tschekwann@outlook.com&gt;</code><br><a href="mailto:&#x74;&#115;&#x63;&#x68;&#101;&#x6b;&#119;&#97;&#x6e;&#110;&#64;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#115;&#x63;&#x68;&#101;&#x6b;&#119;&#97;&#x6e;&#110;&#64;&#x6f;&#x75;&#x74;&#108;&#x6f;&#x6f;&#x6b;&#x2e;&#99;&#x6f;&#x6d;</a></p><h1 id="行内代码和代码块"><a href="#行内代码和代码块" class="headerlink" title="行内代码和代码块"></a>行内代码和代码块</h1><p><code>代码条（一行里的代码）</code><br>这个符号在英文模式下可以输入（左上角的反引号）</p><p>代码块的话只需要三个左上角的符号就可以<br>下面是一个代码块的示范：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>(<span class="hljs-params">a,b,c</span>):<br><span class="hljs-keyword">return</span> a+b+c<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-string">&quot;Hello World!&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>三个波浪线<code>~~~</code>或点 <code>```</code>(输入的时候使用了空格进行转义，也可以```  </li><li>中间是代码块，在第一组波浪线右边写语言的名称 （python c++ md）</li><li>代码块里会语法高亮，但是不会自动排版，obsidian好像用不了tab  </li><li>也可以用来转义 如   <code># 一级标题</code></li></ul><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>用\转义 ，转义的时候反斜线不显示   </p><p>可以被\转义的符号如下：<br>\                        反斜线（转义）<br>`                       反引号（代码条）<br>*                          星号（粗体、列表）<br>_                          底线（分割线）<br>{}                    花括号<br>[]                    方括号（链接）<br>#                         井号（标题）<br>+                         加号（列表）<br>-                          减号（列表、分割线）<br>.                   英文句点<br>!                       感叹号（图片链接）  </p><p>转义的作用范围只有后面紧跟的一个符号<br>可以一个粘着一个 <code>\*\*\*</code></p><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1> <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">在需要注明的话的旁边标上[^1]第二条[^2]就可以了<br></code></pre></td></tr></table></figure><p> 在需要插入脚注的地方插入一个符号<a href="%E4%B8%8D%E7%9F%A5%E9%81%93%E8%AF%B4%E7%82%B9%E4%BB%80%E4%B9%88">^第一处脚注</a>，脚注的名字是自己取的，但是显示的时候自动是一个个数字序号。无论脚注的注释写在哪里，都会自动转移到文章的底部，所以只需要在段落的后面紧跟一段注释就可以了。详细再参考[[格式化你的笔记#脚注]]</p><pre><code class="hljs"> 好像这样可以插入一个段落？（缩进就可以了）</code></pre><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p> 使用两对百分号就可以<br> <code>%%这里面写注释%%</code><br> 预览模式下看不到注释的内容  </p><h3 id="并且预览模式下会自动消除空行"><a href="#并且预览模式下会自动消除空行" class="headerlink" title="并且预览模式下会自动消除空行"></a>并且预览模式下会自动消除空行</h3><h1 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h1><p> Obsidian 通过 <a href="https://mermaid-js.github.io/">Mermaid</a> 及其所提供的<a href="https://mermaid-js.github.io/mermaid-live-editor">编译器</a>来为用户提供图表的绘制功能。</p> <figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xl">```mermaid<br>sequenceDiagram<br>    A<span class="hljs-function"><span class="hljs-title">lice</span>-&gt;</span>&gt;+John: 嗨，John，最近怎样？<br>    A<span class="hljs-function"><span class="hljs-title">lice</span>-&gt;</span>&gt;+John: John，听得到我说话吗？<br>    J<span class="hljs-function"><span class="hljs-title">ohn</span>--&gt;</span>&gt;-Alice: 嗨，Alice，我能听到！<br>    J<span class="hljs-function"><span class="hljs-title">ohn</span>--&gt;</span>&gt;-Alice: 最近不错！<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    Alice-&gt;&gt;+John: 嗨，John，最近怎样？    Alice-&gt;&gt;+John: John，听得到我说话吗？    John--&gt;&gt;-Alice: 嗨，Alice，我能听到！    John--&gt;&gt;-Alice: 最近不错！</code></pre><h1 id="GFM"><a href="#GFM" class="headerlink" title="GFM"></a>GFM</h1><ul><li>提供了包括表格、任务列表、删除线、围栏代码、Emoji等在内的标记语法</li><li>删除线在粗体那一栏已有介绍</li><li>围栏代码块也在代码块里有记述</li></ul><h5 id="表情符号-Obsidian里好像用不了"><a href="#表情符号-Obsidian里好像用不了" class="headerlink" title="表情符号(Obsidian里好像用不了)"></a>表情符号(Obsidian里好像用不了)</h5><p>用冒号包围  表情符号代码参考 <a href="http://www.webpagefx.com/">http://www.webpagefx.com</a>  </p><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><ul><li>用|来分割单元格</li><li>单元格和|之间的空格会被移除</li><li>表头和其他行用-来分隔</li><li>左对齐 :—-</li><li>右对齐 —-:</li><li>居中对齐 :—–:</li><li>冒号和减号只能用半角模式！！！！！</li><li>减号有几个无所谓</li><li>表头后面必须有分隔行,同时指定对齐方式</li><li>在表格的前后各空一行</li><li>超过页面宽度会自动折叠</li><li>不要使用庞大复杂的表格</li><li>块级元素不能插入表格（代码块、引用块）</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">|左对齐   |右对齐    |居中对齐|默认|<br>|:----    |----------:|:----: |--------|<br>|内容1|内容2    |内容3|emmmmmmmmmmmm|<br>|内容1哈哈哈哈哈哈|内容哈哈哈哈哈|<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">www.google.com</span>&gt;</span></span>|emmmmmmmmm|<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th><th>默认</th></tr></thead><tbody><tr><td align="left">内容1</td><td align="right">内容2</td><td align="center">内容3</td><td>emmmmmmmmmmmm</td></tr><tr><td align="left">内容1哈哈哈哈哈哈</td><td align="right">内容哈哈哈哈哈</td><td align="center">&lt;<a href="http://www.google.com>">www.google.com&gt;</a></td><td>emmmmmmmmm</td></tr></tbody></table><h5 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h5><p><code>- [ ] 条目</code><br><code>- [x] 条目</code></p><ul><li>减号加空格！！！加方括号  </li><li>方括号里必须有空格或者x</li><li>方括号后面必须再跟一个括号！！！！！！</li><li><input disabled="" type="checkbox"> 未勾选</li><li><input checked="" disabled="" type="checkbox"> 已勾选</li></ul><h5 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h5><p>锚点也叫书签，用来标记文档的特定位置，使用锚点可以跳转到当前文档或其他文档中的标记位置。Markdown会被渲染成HTML页面，在HTML页面中可以通过锚点实现跳转；GitHub、Gitbook项目中的目录也是通过锚点实现跳转的。<br>中括号里锚点描述，紧跟的小括号内一个井号加上锚点名<br><a href="#%E8%A1%A8%E6%A0%BC">表格</a></p><ul><li>锚点名建议使用字母和数字</li><li>锚点名区分大小写</li><li>锚点名中不能有空格，也不能有特殊字符</li><li>锚点好像只能匹配第一个符合条件的 类似于正则表达式？</li></ul><h1 id="排版技巧"><a href="#排版技巧" class="headerlink" title="排版技巧"></a>排版技巧</h1><p>好的排版就是好的设计，而设计总会遵循一定的规则。</p><h5 id="关于空格"><a href="#关于空格" class="headerlink" title="关于空格"></a>关于空格</h5><ol><li>中&#x2F;英文和数字之间加空格</li><li>英文标点前不加空格，后面加空格</li><li><blockquote><p>标识路径的时候前后都加空格</p></blockquote></li><li>中文标点前后都不需要空格</li><li>&#x2F;(半角)表示‘或’、‘路径’时，与前后都不加空格</li><li>数字与货币符号、百分号、单位之间无空格</li></ol><h5 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h5><p>全角是中文标点 两个字节<br>半角是英文标点 一个字节</p><h1 id="疑惑区"><a href="#疑惑区" class="headerlink" title="疑惑区"></a>疑惑区</h1><ol><li>流程图、甘特图怎么画</li><li>怎么高亮</li><li>快捷键</li><li>强制换行在移植时是必要的吗</li><li>vscode中的Markdown</li><li>typora中的Markdown</li></ol><h1 id="写邮件"><a href="#写邮件" class="headerlink" title="写邮件"></a>写邮件</h1><p>MarkdownHere 浏览器插件，支持GFM语法，可以一键渲染富文本编辑器中的Markdown语法，可以使用任意web编辑器来写邮件。Chrome、Firefox、Safari、Opera的适用插件。<br>下载地址<a href="https://markdown-here.com/get.html">https://markdown-here.com/get.html</a><br>源码地址<a href="https://github.com/adamp/markdown-here/">https://github.com/adamp/markdown-here/</a></p><p>通常步骤  </p><ol><li>在编辑器中写邮件</li><li>复制渲染后的内容</li><li>黏贴到邮件编辑器</li><li>发送邮件</li></ol><p>使用Markdownhere的步骤  </p><ol><li>安装插件</li><li>在邮件编辑器中用Markdown编写邮件</li><li>单击MarkdownHere渲染邮件内容</li><li>发送邮件</li></ol><p>比如说在Chrome应用商店中搜索MarkdownHere，找到后进入安装界面，单击右上角的【添加至Chrome】安装插件，安装成功后重启Chrome，右上角会显示MarkdownHere图标，理论上MH可以渲染所有web端富文本编辑器中的Markdown文档。如果不喜欢MH的默认主题，也可以自定义主题，在弹出的操作列表中单击【选项】进入设置页面，在【基本渲染CSS】中可以自定义Markdown主题，在【语法高亮CSS】中可以选择代码高亮的主题，在【预览】中可以实时查看效果。如果你是一名前端开发者，可以尝试定制一款属于自己的主题。而对于普通用户而言，使用现成主题就ok。</p><h1 id="交互式文档"><a href="#交互式文档" class="headerlink" title="交互式文档"></a>交互式文档</h1><p>交互式文档中的代码是可执行的。应用最广泛的领域是技术写作、数据分析和机器学习。最流行的工具是JupyterNotebook和RMarkdown。  </p><p>jupyter可以在vscode中打开。<br>jupyter单元格分为两类：Markdown和代码。都可以通过shift+enter进行渲染和执行。jupyter中的md似乎只能强制换行。导出文档通过菜单栏-&gt;file-&gt;download as可以导出HTML、Markdown、PDF、reveal.js幻灯片。  </p><p>rmarkdown就是在Markdown中通过r语言实现交互式文档（现在也支持Python、bash、SQL等常用语言）。先安装R语言和RStudio编辑器，安装rmarkdown包。</p><h1 id="网页编写工具"><a href="#网页编写工具" class="headerlink" title="网页编写工具"></a>网页编写工具</h1><p>可以使用md-page项目，添加md-page这个依赖以后，就可以直接使用md来写一些简单的网页了，无需转换格式，直接双击文档即可预览。</p><ol><li>使用任意编辑器（vscode），新建一个HTML文件</li><li>在文件的顶部添加所依赖的js脚本（由于网络原因，脚本加载可能会比较慢，严重影响了渲染效果。建议从md-page项目中下载md-page.js到本地，并且与该文件放在同一个目录中</li><li>使用md编写页面内容，编写完成后双击文件即可查看页面效果</li></ol><h1 id="在vscode中使用Markdown"><a href="#在vscode中使用Markdown" class="headerlink" title="在vscode中使用Markdown"></a>在vscode中使用Markdown</h1><p>vscode支持三个系统，内置Git版本控制器，有很多功能强大的插件。</p><h5 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h5><p>中文插件、主题插件、快捷键插件</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
